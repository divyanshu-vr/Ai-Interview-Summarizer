"use strict";(self.webpackChunkreal_time_interview_summarizer=self.webpackChunkreal_time_interview_summarizer||[]).push([[492],{492:(e,r,i)=>{i.d(r,{default:()=>s});const s=class{constructor(){this.worker=null,this.isInitialized=!1,this.isInitializing=!1,this.messageId=0,this.pendingMessages=new Map,this.currentModel="Xenova/whisper-tiny.en",this.onReady=null,this.onError=null,this.onProgress=null}async initialize(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Xenova/whisper-tiny.en";if(this.isInitialized||this.isInitializing)return this.isInitialized;this.isInitializing=!0;try{try{this.worker=new Worker("/whisperWorker.js")}catch(r){throw console.error("Failed to create Whisper worker:",r),new Error("Whisper worker not available. Please ensure whisperWorker.js is in the public directory.")}this.worker.onmessage=this.handleWorkerMessage.bind(this),this.worker.onerror=this.handleWorkerError.bind(this),await this.waitForWorkerReady();const i=await this.sendMessage("initialize",{modelName:e});if(i.success)return this.isInitialized=!0,this.currentModel=e,console.log("WhisperService initialized successfully"),this.onReady&&this.onReady(),!0;throw new Error(i.error||"Failed to initialize Whisper model")}catch(r){return console.error("WhisperService initialization failed:",r),this.handleError("Initialization failed",r),!1}finally{this.isInitializing=!1}}waitForWorkerReady(){return new Promise((e,r)=>{const i=setTimeout(()=>{r(new Error("Worker ready timeout"))},3e4),s=r=>{"ready"===r.data.type&&(clearTimeout(i),this.worker.removeEventListener("message",s),e())};this.worker.addEventListener("message",s)})}async transcribe(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)throw new Error("WhisperService not initialized");if(!e||0===e.length)return{text:"",confidence:0,segments:[],processingTime:0};try{return await this.sendMessage("transcribe",{audioData:e,options:{language:r.language||"english",chunkLength:r.chunkLength||30,strideLength:r.strideLength||5,...r}})}catch(i){throw console.error("Transcription failed:",i),i}}async changeModel(e){if(!this.worker)throw new Error("Worker not available");try{const r=await this.sendMessage("changeModel",{modelName:e});if(r.success)return this.currentModel=e,console.log("Model changed to:",e),!0;throw new Error(r.error||"Failed to change model")}catch(r){return console.error("Model change failed:",r),this.handleError("Model change failed",r),!1}}async getAvailableModels(){if(!this.worker)return[];try{return await this.sendMessage("getAvailableModels")}catch(e){return console.error("Failed to get available models:",e),[]}}async getModelInfo(e){if(!this.worker)return{};try{return await this.sendMessage("getModelInfo",{modelName:e})}catch(r){return console.error("Failed to get model info:",r),{}}}sendMessage(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return new Promise((i,s)=>{if(!this.worker)return void s(new Error("Worker not available"));const t=++this.messageId;this.pendingMessages.set(t,{resolve:i,reject:s});const n=setTimeout(()=>{this.pendingMessages.delete(t),s(new Error(`Message timeout: ${e}`))},6e4),o=i,a=s;this.pendingMessages.set(t,{resolve:e=>{clearTimeout(n),o(e)},reject:e=>{clearTimeout(n),a(e)}}),this.worker.postMessage({id:t,type:e,data:r})})}handleWorkerMessage(e){const{id:r,type:i,data:s}=e.data;if("ready"===i)return;if("progress"===i)return console.log("Model loading progress:",s.progress),void(this.onProgress&&this.onProgress(s.progress));if(!r||!this.pendingMessages.has(r))return void console.warn("Received message with unknown ID:",r);const{resolve:t,reject:n}=this.pendingMessages.get(r);this.pendingMessages.delete(r),"success"===i?t(s):n("error"===i?new Error(s.message):new Error(`Unknown response type: ${i}`))}handleWorkerError(e){console.error("Worker error:",e),this.handleError("Worker error",e)}handleError(e,r){console.error(e,r),this.onError&&this.onError({message:e,error:r,timestamp:Date.now()})}getStatus(){return{isInitialized:this.isInitialized,isInitializing:this.isInitializing,currentModel:this.currentModel,workerAvailable:!!this.worker,pendingMessages:this.pendingMessages.size}}setReadyCallback(e){this.onReady=e}setErrorCallback(e){this.onError=e}setProgressCallback(e){this.onProgress=e}async cleanup(){try{this.worker&&this.isInitialized&&await this.sendMessage("cleanup")}catch(e){console.warn("Cleanup message failed:",e)}this.worker&&(this.worker.terminate(),this.worker=null);for(const[r,{reject:i}]of this.pendingMessages)i(new Error("Service cleanup"));this.pendingMessages.clear(),this.isInitialized=!1,this.isInitializing=!1,this.messageId=0,console.log("WhisperService cleaned up")}}}}]);
//# sourceMappingURL=492.a6cc0319.chunk.js.map